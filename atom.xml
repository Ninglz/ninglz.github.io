<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xlbaren-下里巴人</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-02T14:33:59.138Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>下里巴人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git的安装</title>
    <link href="http://yoursite.com/git%E7%9A%84%E5%AE%89%E8%A3%85.html"/>
    <id>http://yoursite.com/git的安装.html</id>
    <published>2016-12-03T07:50:01.000Z</published>
    <updated>2016-12-02T14:33:59.138Z</updated>
    
    <content type="html"><![CDATA[<p>还没写。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还没写。。。&lt;/p&gt;

    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例与7种实现</title>
    <link href="http://yoursite.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E4%B8%8E7%E7%A7%8D%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://yoursite.com/设计模式-单例与7种实现.html</id>
    <published>2016-12-02T14:30:52.000Z</published>
    <updated>2016-12-02T14:34:55.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><h2 id="什么是单例？"><a href="#什么是单例？" class="headerlink" title="什么是单例？"></a>什么是单例？</h2><p>无论程序如何运行，采用单例模式的类（Singleton类）只会产生一个实例对象。</p>
<h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h2><blockquote>
<ul>
<li>构造方法私有化</li>
<li>内部产生实例对象，并是静态static类型</li>
<li>定义一个静态方法返回该实例</li>
</ul>
</blockquote>
<h2 id="实现方式-共7种"><a href="#实现方式-共7种" class="headerlink" title="实现方式-共7种"></a>实现方式-共7种</h2><h4 id="1、懒汉-非同步（不建议采用）"><a href="#1、懒汉-非同步（不建议采用）" class="headerlink" title="1、懒汉-非同步（不建议采用）"></a>1、懒汉-非同步（不建议采用）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)</div><div class="line">      singleton = <span class="keyword">new</span> Singleton();</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法的懒汉模式采用懒加载，在多线程中不能保障只创建一个实例，并且有未知问题属于线程不安全的实现。</p>
<h4 id="2、-懒汉-同步（不建议采用）"><a href="#2、-懒汉-同步（不建议采用）" class="headerlink" title="2、 懒汉-同步（不建议采用）"></a><span id="jump">2、 懒汉-同步（不建议采用）</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)</div><div class="line">      singleton = <span class="keyword">new</span> Singleton();</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>较上一个方法只是增加了<code>synchronized</code>关键字，却保证了线程安全。但是他执行的效率非常低，大部分情况下不需要同步。</p>
<h4 id="3、饿汉–静态工厂"><a href="#3、饿汉–静态工厂" class="headerlink" title="3、饿汉–静态工厂"></a>3、饿汉–静态工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>饿汉模式，类一加载立即初始化，线程安全，调用速度会比懒汉模式快一点。</p>
<h4 id="4、懒汉-变种"><a href="#4、懒汉-变种" class="headerlink" title="4、懒汉-变种"></a>4、懒汉-变种</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> clss Singleton&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line"> <span class="keyword">static</span>&#123;</div><div class="line">    singleton = <span class="keyword">new</span> Singleton();</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> singleton;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法其实和懒汉模式是一样的，都是在类加载的时候进行初始化。</p>
<h3 id="5、静态内部类"><a href="#5、静态内部类" class="headerlink" title="5、静态内部类"></a>5、静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> clss Singleton&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> SingletonHolder&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton SINGLETON = <span class="keyword">new</span> Singleton();</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> SingletonHolder.SINGLETON;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>final</code> 表示只能赋值一次，不能被子类重写， <code>private</code>表示只能本身访问不能被子类继承，<code>static</code> 表示属于成员变量或方法。<br>这种方式能保证到初始化<code>SINGLETION</code>只有一个线程。在<code>Singleton</code>类被加载的时候并没有初始化自己的实例，因为<code>SingletonHolder</code>（静态内部类）没有被<code>Singleton</code>类调用。他的是在调用<code>getInstance()</code>方法的时候才被初始化。这样实现了延迟加载。同时他也是线程安全的。</p>
<h4 id="6、双重校验锁"><a href="#6、双重校验锁" class="headerlink" title="6、双重校验锁"></a>6、双重校验锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> clss Singleton&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;                  <span class="comment">//第1行</span></div><div class="line">        <span class="keyword">synchronized</span>(Singleton.class)&#123;      <span class="comment">//第2行</span></div><div class="line">            <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)           <span class="comment">//第3行</span></div><div class="line">                singleton = <span class="keyword">new</span> Singleton();<span class="comment">//第4行</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">      <span class="keyword">return</span> singleton;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>volatile</code> 后续会讲到表示从堆内存中取出最新的值，在线程内存中赋值，不具有原子性，具有可见性。不是线程安全的。<br>在未添加<code>volatile</code>的时候这是一个错误的优化！在线程执行到<strong>第1行</strong>代码读取到<code>instance</code>不为<code>null</code>时，<code>instance</code>引用的对象有可能还没有完成初始化。（线程不安全）<br>在<strong>JDK1.5</strong>之后，双重检查锁定才能够正常达到单例效果（线程安全）。<code>volatile</code><strong>能够确保在不同的编译器里面new一个对象的时候执行的顺序一致：分配内存空间-&gt;初始化对象-&gt;指向内存空间。</strong>具体原因的详细描述在后续在并发的文章里面描述。<br>双重校验锁的目的是降低<code>synchronized</code>的开销。是<a href="#jump">懒汉-同步</a>方法的升级版本。</p>
<h4 id="7、枚举（推荐）"><a href="#7、枚举（推荐）" class="headerlink" title="7、枚举（推荐）"></a>7、枚举（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line"> INSTANCE; <span class="comment">//定义一个枚举的元素，就代表Singleton的一个实例</span></div><div class="line"> <span class="keyword">private</span> Singleton singleton = <span class="keyword">null</span> ;</div><div class="line"> Singleton() &#123;</div><div class="line">     singleton = <span class="keyword">new</span> Singleton();</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> singleton;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>Singleton.INSTANCE.getInstance()</code>即获得所要实例。实现原理和<strong>懒汉模式</strong>很相似， 枚举方式是线程安全的，并且代码简单简洁，。传统单例存在的一个问题是一旦你实现了序列化接口那么它们不再保持单例了。<strong>JVM</strong>对枚举单例进行了特殊处理，让他保证序列化的同时保持单例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例&quot;&gt;&lt;a href=&quot;#单例&quot; class=&quot;headerlink&quot; title=&quot;单例&quot;&gt;&lt;/a&gt;单例&lt;/h1&gt;&lt;h2 id=&quot;什么是单例？&quot;&gt;&lt;a href=&quot;#什么是单例？&quot; class=&quot;headerlink&quot; title=&quot;什么是单例？&quot;&gt;&lt;/a&gt;什
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>博客成立啦</title>
    <link href="http://yoursite.com/%E5%8D%9A%E5%AE%A2%E6%88%90%E7%AB%8B%E5%95%A6.html"/>
    <id>http://yoursite.com/博客成立啦.html</id>
    <published>2016-12-02T07:47:01.000Z</published>
    <updated>2016-12-02T09:17:07.244Z</updated>
    
    <content type="html"><![CDATA[<p>工作4年，其实一直想直接搞一个属于自己的博客。<br><a id="more"></a></p>
<p>万恶的自己拖延症太严重，几次博客搭建到一半又放弃了。所以就这样一直拖到了现在。<br>昨天浏览别人的博客查资料，发现他的博客很帅气，研究了一下，发现了搭建的框架，今天呢就3分热度的也搭建了起来，万幸的是在这三分热度的时间把博客搭建好了。</p>
<h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><p>Hexo与github搭建，后续我会写一篇文章，教大家如何搭建自己的博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作4年，其实一直想直接搞一个属于自己的博客。&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://yoursite.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
