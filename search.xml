<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[git的安装]]></title>
      <url>%2Fgit%E7%9A%84%E5%AE%89%E8%A3%85.html</url>
      <content type="text"><![CDATA[还没写。。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[设计模式-单例与7种实现]]></title>
      <url>%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E4%B8%8E7%E7%A7%8D%E5%AE%9E%E7%8E%B0.html</url>
      <content type="text"><![CDATA[单例什么是单例？无论程序如何运行，采用单例模式的类（Singleton类）只会产生一个实例对象。 如何实现？ 构造方法私有化 内部产生实例对象，并是静态static类型 定义一个静态方法返回该实例 实现方式-共7种1、懒汉-非同步（不建议采用）123456789public class Singleton&#123; private static Singleton singleton = null; private Singleton()&#123;&#125;; private static Singleton getInstance()&#123; if(singleton == null) singleton = new Singleton(); return singleton; &#125;&#125; 此方法的懒汉模式采用懒加载，在多线程中不能保障只创建一个实例，并且有未知问题属于线程不安全的实现。 2、 懒汉-同步（不建议采用）123456789public class Singleton&#123; private static Singleton singleton = null; private Singleton()&#123;&#125;; private static synchronized Singleton getInstance()&#123; if(singleton == null) singleton = new Singleton(); return singleton; &#125;&#125; 较上一个方法只是增加了synchronized关键字，却保证了线程安全。但是他执行的效率非常低，大部分情况下不需要同步。 3、饿汉–静态工厂1234567public class Singleton&#123; private static Singleton singleton = new Singleton(); private Singleton()&#123;&#125;; private static Singleton getInstance()&#123; return singleton; &#125;&#125; 饿汉模式，类一加载立即初始化，线程安全，调用速度会比懒汉模式快一点。 4、懒汉-变种12345678910public clss Singleton&#123; private static Singleton singleton = null; private Singleton()&#123;&#125;; static&#123; singleton = new Singleton(); &#125; public static Singleton getInstance()&#123; return singleton; &#125;&#125; 此方法其实和懒汉模式是一样的，都是在类加载的时候进行初始化。 5、静态内部类123456789public clss Singleton&#123; private static SingletonHolder&#123; private static final Singleton SINGLETON = new Singleton(); &#125; private Singleton()&#123;&#125;; public static final Singleton getInstance()&#123; return SingletonHolder.SINGLETON; &#125;&#125; final 表示只能赋值一次，不能被子类重写， private表示只能本身访问不能被子类继承，static 表示属于成员变量或方法。这种方式能保证到初始化SINGLETION只有一个线程。在Singleton类被加载的时候并没有初始化自己的实例，因为SingletonHolder（静态内部类）没有被Singleton类调用。他的是在调用getInstance()方法的时候才被初始化。这样实现了延迟加载。同时他也是线程安全的。 6、双重校验锁12345678910111213public clss Singleton&#123; private volatile static Singleton singleton = null; private Singleton()&#123;&#125;; public static Singleton getInstance()&#123; if(singleton == null)&#123; //第1行 synchronized(Singleton.class)&#123; //第2行 if(singleton == null) //第3行 singleton = new Singleton();//第4行 &#125; &#125; return singleton; &#125;&#125; volatile 后续会讲到表示从堆内存中取出最新的值，在线程内存中赋值，不具有原子性，具有可见性。不是线程安全的。在未添加volatile的时候这是一个错误的优化！在线程执行到第1行代码读取到instance不为null时，instance引用的对象有可能还没有完成初始化。（线程不安全）在JDK1.5之后，双重检查锁定才能够正常达到单例效果（线程安全）。volatile能够确保在不同的编译器里面new一个对象的时候执行的顺序一致：分配内存空间-&gt;初始化对象-&gt;指向内存空间。 具体原因的详细描述在后续在并发的文章里面描述。双重校验锁的目的是降低synchronized的开销。是懒汉-同步方法的升级版本。 7、枚举（推荐）12345678910public enum Singleton &#123; INSTANCE; //定义一个枚举的元素，就代表Singleton的一个实例 private Singleton singleton = null ; Singleton() &#123; singleton = new Singleton(); &#125; public Singleton getInstance() &#123; return singleton; &#125;&#125; 使用Singleton.INSTANCE.getInstance()即获得所要实例。实现原理和懒汉模式很相似， 枚举方式是线程安全的，并且代码简单简洁，。传统单例存在的一个问题是一旦你实现了序列化接口那么它们不再保持单例了。JVM 对枚举单例进行了特殊处理，让他保证序列化的同时保持单例。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[博客成立啦]]></title>
      <url>%2F%E5%8D%9A%E5%AE%A2%E6%88%90%E7%AB%8B%E5%95%A6.html</url>
      <content type="text"><![CDATA[工作4年，其实一直想直接搞一个属于自己的博客。 万恶的自己拖延症太严重，几次博客搭建到一半又放弃了。所以就这样一直拖到了现在。昨天浏览别人的博客查资料，发现他的博客很帅气，研究了一下，发现了搭建的框架，今天呢就3分热度的也搭建了起来，万幸的是在这三分热度的时间把博客搭建好了。 关于博客Hexo与github搭建，后续我会写一篇文章，教大家如何搭建自己的博客]]></content>
    </entry>

    
  
  
</search>
